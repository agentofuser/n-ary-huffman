// Generated by CoffeeScript 1.8.0

/*
 * Copyright 2014 Simon Lydell
 * X11 (“MIT”) Licensed. (See LICENSE.)
 */
var BranchingPoint, Padding;

module.exports = function(originalElements, _arg, callback) {
  var alphabet, element, elements, i, index, lowestWeight, numBranchPoints, numBranches, numElements, padding, root, sum, walk, _i, _j, _k, _l;
  alphabet = _arg.alphabet;
  if (!(alphabet.length >= 2)) {
    throw new RangeError("`options.alphabet` must consist of at least two characters.");
  }
  elements = originalElements.slice(0);
  if (elements.length <= 1) {
    if (elements.length === 1) {
      callback(elements[0], alphabet[0]);
    }
    return;
  }
  numBranches = alphabet.length;
  numElements = elements.length;
  numBranchPoints = Math.ceil((numElements - 1) / (numBranches - 1));
  padding = 1 + (numBranches - 1) * numBranchPoints - numElements;
  elements.sort(function(a, b) {
    return b.weight - a.weight;
  });
  for (i = _i = 0; _i < padding; i = _i += 1) {
    elements.push(new Padding);
  }
  for (i = _j = 0; _j < numBranchPoints; i = _j += 1) {
    sum = new BranchingPoint;
    for (i = _k = 0; _k < numBranches; i = _k += 1) {
      lowestWeight = elements.pop();
      sum.weight += lowestWeight.weight;
      sum.children.unshift(lowestWeight);
    }
    for (index = _l = elements.length - 1; _l >= 0; index = _l += -1) {
      element = elements[index];
      if (sum.weight <= element.weight) {
        break;
      }
    }
    elements.splice(index + 1, 0, sum);
  }
  root = elements[0];
  return (walk = function(node, codeWord) {
    var childNode, _len, _m, _ref;
    if (node instanceof BranchingPoint) {
      _ref = node.children;
      for (index = _m = 0, _len = _ref.length; _m < _len; index = ++_m) {
        childNode = _ref[index];
        walk(childNode, codeWord + alphabet[index]);
      }
    } else {
      if (!(node instanceof Padding)) {
        callback(node, codeWord);
      }
    }
  })(root, "");
};

Padding = (function() {
  function Padding() {}

  Padding.prototype.weight = 0;

  return Padding;

})();

BranchingPoint = (function() {
  function BranchingPoint() {
    this.weight = 0;
    this.children = [];
  }

  return BranchingPoint;

})();
